// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Relay = require("../src/Relay.bs.js");
var Graphql = require("rescript-graphqljs/src/Graphql.bs.js");
var Js_dict = require("rescript/lib/js/js_dict.js");
var Graphql$1 = require("graphql");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Js_promise2 = require("rescript/lib/js/js_promise2.js");
var Strict = require("node:assert/strict");

var args = Relay.Args.addArg(Relay.Args.defaultArgs(), "test", Relay.Args.make({
          type: Graphql$1.GraphQLString,
          defaultValue: {
            NAME: "String",
            VAL: "test"
          },
          description: "test input type"
        }));

var testMutation = Relay.Mutation.make({
      name: "TestMutation",
      description: "test mutation",
      inputFields: args,
      outputFields: {
        message: {
          NAME: "Field3",
          VAL: {
            type_: Graphql$1.GraphQLString,
            description: "test output type",
            resolve: (async function (obj, _args, _ctx) {
                return obj.message;
              })
          }
        },
        error: {
          NAME: "Field3",
          VAL: {
            type_: Graphql$1.GraphQLString,
            description: "test output type",
            resolve: (async function (obj, _args, _ctx) {
                return obj.error;
              })
          }
        }
      },
      mutateAndGetPayload: (async function (args, _ctx) {
          return {
                  message: args.test,
                  error: null
                };
        })
    });

var fields = Graphql.Field.make(Graphql.Field.addField(Graphql.Field.empty(), "id", {
          NAME: "Field2",
          VAL: {
            type: Graphql$1.GraphQLID,
            description: "my field id"
          }
        }));

var modelType = Graphql.ModelType.make({
      name: "test",
      description: "my model",
      fields: fields
    });

var model = Graphql.Model.make({
      type: modelType,
      resolve: (async function (_obj, _args, _ctx) {
          return {
                  id: "test id",
                  name: "test name",
                  age: 42
                };
        })
    });

var t = Js_dict.fromArray([[
        "test",
        model
      ]]);

var query = Graphql.Query.make(Graphql.Query.addField(Graphql.Query.empty("test_q"), "testQ", model));

var mutation = Graphql.Mutation.make(Graphql.Mutation.addField(Graphql.Mutation.empty("test_m"), "testM", testMutation));

var schema = Graphql.Schema.make({
      query: query,
      mutation: Caml_option.some(mutation)
    });

Js_promise2.then(Graphql$1.graphql({
          schema: schema,
          source: "mutation { testM(input: {}) { message error } }"
        }), (async function (v) {
        var value = v.data.testM.message;
        Strict.equal(value, "test");
        return function (prim) {
          return Promise.resolve(prim);
        };
      }));

var query$1 = "mutation { testM(input: {test: \"my test\"}) { message error } }";

Js_promise2.then(Graphql$1.graphql({
          schema: schema,
          source: query$1
        }), (async function (v) {
        var value = v.data.testM.message;
        Strict.equal(value, "my test");
        return function (prim) {
          return Promise.resolve(prim);
        };
      }));

exports.args = args;
exports.testMutation = testMutation;
exports.fields = fields;
exports.modelType = modelType;
exports.model = model;
exports.t = t;
exports.mutation = mutation;
exports.schema = schema;
exports.query = query$1;
/* args Not a pure module */
